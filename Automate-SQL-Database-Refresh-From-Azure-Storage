function Log-Message()
{
    param
        (
        [Parameter(Mandatory=$true)] [string] $Message,
        [Parameter(Mandatory=$true)] [string] $LogFilePath
        )

        Try {
        #Add content to the Log File
        Add-Content -Path $LogFilePath -Value $Message
        }
        Catch {
        Add-Content -Path $LogFilePath -Value $_.Exception.Message
        }
}

function CreateFolderStructure 
{
    param([string]$Path)

    # create folder for database scripts
    if ( !(Test-Path "$Path\$DatabaseName"))
        {$null=new-item -type directory -Name "$DatabaseName" -path "$Path\"}  
}

#Set session log path
$SessionFilePath="C:\ProdRestoreFilesList\LOG\Session_Log.txt"

#Delete the Log file if exists
if(Test-Path $SessionFilePath)
{
    Remove-Item $SessionFilePath
}


Start-Transcript -Path  $SessionFilePath


#Set location for the log file
$LogFilePath="C:\ProdRestoreFilesList\LOG\Database_RestoreLog.txt"

#Ensure the parent folder for log file
$FolderPath=Split-Path $LogFilePath
if(!(Test-Path -path $FolderPath))
{
    New-Item -ItemType directory -Path $FolderPath | Out-Null
}

#Delete the Log file if exists
if(Test-Path $LogFilePath)
{
    Remove-Item $LogFilePath
}

#Log start time of the script
$StartTime = (Get-Date)
Log-Message "Script started at: $(Get-date -format 'dd/mm/yyy hh:mm:ss:tt')" -LogFilePath $LogFilePath

$SqlServer="grpweudevmsql01.luxbourse.local"
$Username="LocalSqlAdm"
$Pwd="Xuldu2022!.."
#$Pwd = read-host -AsSecureString -Prompt "Password"
$Path="C:\ProdRestoreFilesList"

#Get the list of databases to restore
$Database = Invoke-SqlCmd -ServerInstance $SqlServer -Username $Username -Password $Pwd -Database master `
 -Query "select name from master.sys.databases where database_id>4 and [name] in ('PORT','DIAM','HIST','COAM','PORT_WHLA','UCIT','camundafsq','FWDL','ULIS','FWCM','RPTG','Quartz')"

#invoke-sqlcmd -inputfile "C:\scripts\Replication\Drop-Quartz-Replication.sql" -ServerInstance $SqlServer -Username $Username -Password $Pwd -Database "Quartz"

#invoke-sqlcmd -inputfile "C:\scripts\Replication\Create-Quartz-Replication.sql" -ServerInstance $SqlServer -Username $Username -Password $Pwd -Database "Quartz"

#Install-Module -Name Az -Force 
$AzureStorageAccount='fsqsqlbackupprd'
$RestoreDateTime='03/22/2024 09:30:00'
$StorageContainer='https://fsqsqlbackupprd.blob.core.windows.net/sqlbackup/'
$ResourceGroup='grp-weu-prd-rgp-msql-01'

Connect-AzAccount

#Sets the tenant, subscription, and environment for cmdlets to use in the current session.
Set-AzContext -subscription 'Enterprise Production Subscription'

#Gets specific storage account
$aSA = Get-AzStorageAccount -Name $AzureStorageAccount -ResourceGroupName $ResourceGroup
$Container = Get-AzStorageContainer -Context $aSA.Context -Name 'sqlbackup'


##Set-DbaDbState -SqlInstance $SqlServer -Database Quartz,FWCM,FWDL -MultiUser -Force


$Database | ForEach-Object{
             $DatabaseName = $_.name

              CreateFolderStructure -Path $Path 
              Log-Message -Message $DatabaseName -LogFilePath $LogFilePath 
#$DatabaseName = $Database.name

                    $BlobRaw = Get-AzStorageBlob  -Container $Container.Name -Context $aSA.Context | where {$_.Name -like "*$DatabaseName*" } 
                    $DB="$("_"+$DatabaseName+"_")"
                    $DB_FULL="$($DB)$("FULL_")"
                    $DB_DIFF="$($DB)$("DIFF_")"
                    $DB_LOG="$($DB)$("LOG_")"

                    $Full=$BlobRaw  | where {$_.name -like '*/FULL/*' }
                    $Full.name
                    $Full=$Full | where { $_.name -like "*$DB_FULL*" }
                    $Full.name

                    $Diff=$BlobRaw  | where {$_.name -like '*/DIFF/*' }1
                    $Diff=$Diff | where { $_.name -like "*$DB_DIFF*" }
                    $Diff.name

                    $TLog=$BlobRaw  | where {$_.name -like '*/LOG/*' }
                    $TLog=$TLog | where { $_.name -like "*$DB_LOG*" }
                    $TLog.name

                    #below using to get the modified date of the Full backup and use that to retreive the required Diff backup files
                    $FullRestoreDate=$Full | where {$_.LastModified -le $RestoreDateTime} | sort-object LastModified -Descending| Select-Object -First 1
                    $FullRestoreDate.Name
                    $FullRestoreDate.LastModified
                    
                    $LatestFull=$Full | where {$_.LastModified -eq $FullRestoreDate.LastModified} | sort-object Name 
                    
                    
                    #$LatestDiff=$Diff | where {$_.LastModified -ge $FullRestoreDate.LastModified -and $_.LastModified -eq $RestoreDateTime}  | sort-object LastModified -Descending | Select-Object -First 1
                    $LatestDiff=$Diff | where {$_.LastModified -gt $FullRestoreDate.LastModified }  | sort-object LastModified -Descending | Select-Object -First 1

                   


                    #get modified date of the revelant Diff file and use to get TLOGS eq or gt Diff.modified_date. 
                    $LatestDiff.name
                    $DiffRestoreDate=$LatestDiff.LastModified

                    $LatestTLog=$TLog | where {$_.LastModified -gt $DiffRestoreDate -and $_.LastModified -lt $RestoreDateTime }
                    $LatestTLog.name
                    
                    ##Clear the backup files list
                    Clear-Content "$Path\$DatabaseName\$DatabaseName.txt"

                    $FullFileOutPut=$LatestFull | foreach-object {
                            "$($StorageContainer)$($_.Name)" 
                    } 
                                        
                    $FullFileOutPut | Out-File $Path\$DatabaseName\$DatabaseName.txt

                    #check if Diff backup exist, as on SUnday's only full is done.
                    if ($LatestDiff.Name -ne $null ){

                       "$($StorageContainer)$($LatestDiff.Name)" >> $Path\$DatabaseName\$DatabaseName.txt
                    }

                    #Required TLogs we need are LatestTlog and FinalTlog
                    #$LatestTLog > 
                    #Blobs ready should be LatestFull + LatestDiff and required TLogs.   Trick is how to get them into one list, NOT STRINGS joint
                    foreach ($TFile in $LatestTLog)
                    {
                        "$($StorageContainer)$($TFile.Name)" >> $Path\$DatabaseName\$DatabaseName.txt
                    }
                    

}


#Log end time
$EndTime = (Get-Date)
Log-Message "Script ended at: $(Get-date -format 'dd/mm/yyy hh:mm:ss:tt')" -LogFilePath $LogFilePath

#Get elapsed time
$ElapsedTime = ($EndTime - $StartTime).Minutes
Log-Message "Script execution time $ElapsedTime Seconds" -LogFilePath $LogFilePath

Stop-Transcript
